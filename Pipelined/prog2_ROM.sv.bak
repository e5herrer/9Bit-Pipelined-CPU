module prog3_ROM(
input wire clk,
input [7:0] pc,


output reg [8:0] instr_out
);


reg [8:0] instruction [1:21];


initial begin

instruction[1] = 9'b100100000; //set $i lo 0 
instruction[2] = 9'b100000001; // $i hi 32 
instruction[3] = 9'b011000000; //ssb ld,add,bank A, bank A
instruction[4] = 9'b001001010; //mov $I, $t0
instruction[5] = 9'b100100000; // $i lo 96
instruction[6] = 9'b100000011; // $i hi 96
instruction[7] = 9'b001001011; //mov $I, $t1
instruction[8] = 9'b001000111; //mov $0, $t5
instruction[9] = 9'b011011000;//ssb SCmpAA
instruction[10] = 9'b110001010; //SPC $t0
instruction[11] = 9'b110100010; //INC $t0
/*instruction[11] = 9'b001111000; //mov $t5, $0
instruction[12] = 9'b001010000; //mov $t0, $0 */
instruction[12] = 9'b000011010;//cmp $t1, $t0
instruction[13] = 9'b101111101;//obne -3
instruction[14] = 9'b100100101; // $I lo 5
instruction[15] = 9'b100000000; // $I hi 0
instruction[16] = 9'b010001111; //ldst $I, $t5
instruction[17] = 9'b110111000;//halt

/*
instruction[1] = 9'b011001100;//ssb LSltAA
instruction[2] = 9'b100100000;//lo 128
instruction[3] = 9'b100000100;//hi 128
instruction[4] = 9'b010001010;//ldst $I, $t1
instruction[5] = 9'b001010011;//mov $t1, $t2
instruction[6] = 9'b000010001;//slt $t1, $I = 1
instruction[7] = 9'b000010000;//slt $t1, $0 = 0
instruction[8] = 9'b010001010;//ldst $I, $t1
instruction[9] = 9'b000010011;//slt $t1, $t2 = 0
instruction[10] = 9'b011001000;//ssb LCmpAA
instruction[11] = 9'b000010000;//cmp $t1, $0
instruction[12] = 9'b101111100;//obne -4
instruction[13] = 9'b100110000;//lo 16
instruction[14] = 9'b100000000;//hi 0
instruction[15] = 9'b101000001;//obe $I
instruction[16] = 9'b110111000;//halt*/
/*
instruction[5] = 9'b001011100;//mov $t1, $t2
instruction[6] = 9'b100110000;//lo 16
instruction[7] = 9'b100000000;//hi 0
instruction[8] = 9'b000100001;//add $t2, $I = 18
instruction[9] = 9'b011010100;//ssb SSubAA
instruction[10] = 9'b010001100;//ldst $I, $t2 M(16) = 18
instruction[11] = 9'b100110010;//lo 18
instruction[12] = 9'b001001100;//mov $I, $t2 
instruction[13] = 9'b011000100;//ssb LSubAA
instruction[14] = 9'b100110000;//lo 16
instruction[15] = 9'b010001101;//ldst $I, $t3 
instruction[16] = 9'b011001000;//ssb LCmpAA
instruction[17] = 9'b000100101;//cmp $t2, $t3
instruction[18] = 9'b100110101;//lo 20
instruction[19] = 9'b101000001;//obe $I // Shouldn't branch here
instruction[20] = 9'b101111100;//obne -4

instruction[21] = 9'b110111000;//halt*/
/*
instruction[4] = 9'b100110000;//lo 128+16 $I = 128 ->144
instruction[5] = 9'b001001100;//mov $I, $t2 keeps track of end of array


instruction[6] = 9'b110110010;//tally $t0
instruction[7] = 9'b110100010;//inc $t0
instruction[8] = 9'b000010100;//aro $t0, $t2
instruction[9] = 9'b101111100;//obne -4


instruction[10] = 9'b110111100;//count $t2 count is in t2


instruction[11] = 9'b011010000;//ssb SCAA
instruction[12] = 9'b100111110;//lo 126
instruction[13] = 9'b100000011;//hi 126
instruction[14] = 9'b010001011;//ldst $I, $t1


instruction[15] = 9'b100111111;//lo 127
instruction[16] = 9'b010001100;//ldst st, $I, $t2
*/
end


always @ (*)
begin
	instr_out = instruction[pc[7:0]];
end
endmodule